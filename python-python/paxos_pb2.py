# Generated by the protocol buffer compiler.  DO NOT EDIT!
# source: paxos.proto

import sys
_b=sys.version_info[0]<3 and (lambda x:x) or (lambda x:x.encode('latin1'))
from google.protobuf import descriptor as _descriptor
from google.protobuf import message as _message
from google.protobuf import reflection as _reflection
from google.protobuf import symbol_database as _symbol_database
from google.protobuf import descriptor_pb2
# @@protoc_insertion_point(imports)

_sym_db = _symbol_database.Default()




DESCRIPTOR = _descriptor.FileDescriptor(
  name='paxos.proto',
  package='dist_sgd',
  syntax='proto3',
  serialized_pb=_b('\n\x0bpaxos.proto\x12\x08\x64ist_sgd\"(\n\x03\x61\x63k\x12\t\n\x01n\x18\x01 \x01(\x02\x12\t\n\x01v\x18\x02 \x01(\t\x12\x0b\n\x03n_v\x18\x03 \x01(\x05\"\x15\n\x08proposal\x12\t\n\x01n\x18\x01 \x01(\x02\"*\n\x12request_acceptance\x12\t\n\x01n\x18\x01 \x01(\x02\x12\t\n\x01v\x18\x02 \x01(\t\"#\n\x0c\x61\x63quiescence\x12\x13\n\x0b\x61\x63\x63\x65pt_bool\x18\x01 \x01(\x08\"!\n\tconsensus\x12\t\n\x01n\x18\x01 \x01(\x02\x12\t\n\x01v\x18\x02 \x01(\t\"\x07\n\x05\x65mpty2\xdf\x01\n\x0bPaxosServer\x12.\n\x07prepare\x12\x12.dist_sgd.proposal\x1a\r.dist_sgd.ack\"\x00\x12@\n\x06\x61\x63\x63\x65pt\x12\x1c.dist_sgd.request_acceptance\x1a\x16.dist_sgd.acquiescence\"\x00\x12\x32\n\x08\x61\x63\x63\x65pted\x12\x13.dist_sgd.consensus\x1a\x0f.dist_sgd.empty\"\x00\x12*\n\x04ping\x12\x0f.dist_sgd.empty\x1a\x0f.dist_sgd.empty\"\x00\x42\x18\n\x0bio.dist_sgdB\x07\x44istSGDP\x01\x62\x06proto3')
)
_sym_db.RegisterFileDescriptor(DESCRIPTOR)




_ACK = _descriptor.Descriptor(
  name='ack',
  full_name='dist_sgd.ack',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n', full_name='dist_sgd.ack.n', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='v', full_name='dist_sgd.ack.v', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='n_v', full_name='dist_sgd.ack.n_v', index=2,
      number=3, type=5, cpp_type=1, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=25,
  serialized_end=65,
)


_PROPOSAL = _descriptor.Descriptor(
  name='proposal',
  full_name='dist_sgd.proposal',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n', full_name='dist_sgd.proposal.n', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=67,
  serialized_end=88,
)


_REQUEST_ACCEPTANCE = _descriptor.Descriptor(
  name='request_acceptance',
  full_name='dist_sgd.request_acceptance',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n', full_name='dist_sgd.request_acceptance.n', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='v', full_name='dist_sgd.request_acceptance.v', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=90,
  serialized_end=132,
)


_ACQUIESCENCE = _descriptor.Descriptor(
  name='acquiescence',
  full_name='dist_sgd.acquiescence',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='accept_bool', full_name='dist_sgd.acquiescence.accept_bool', index=0,
      number=1, type=8, cpp_type=7, label=1,
      has_default_value=False, default_value=False,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=134,
  serialized_end=169,
)


_CONSENSUS = _descriptor.Descriptor(
  name='consensus',
  full_name='dist_sgd.consensus',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
    _descriptor.FieldDescriptor(
      name='n', full_name='dist_sgd.consensus.n', index=0,
      number=1, type=2, cpp_type=6, label=1,
      has_default_value=False, default_value=0,
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
    _descriptor.FieldDescriptor(
      name='v', full_name='dist_sgd.consensus.v', index=1,
      number=2, type=9, cpp_type=9, label=1,
      has_default_value=False, default_value=_b("").decode('utf-8'),
      message_type=None, enum_type=None, containing_type=None,
      is_extension=False, extension_scope=None,
      options=None),
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=171,
  serialized_end=204,
)


_EMPTY = _descriptor.Descriptor(
  name='empty',
  full_name='dist_sgd.empty',
  filename=None,
  file=DESCRIPTOR,
  containing_type=None,
  fields=[
  ],
  extensions=[
  ],
  nested_types=[],
  enum_types=[
  ],
  options=None,
  is_extendable=False,
  syntax='proto3',
  extension_ranges=[],
  oneofs=[
  ],
  serialized_start=206,
  serialized_end=213,
)

DESCRIPTOR.message_types_by_name['ack'] = _ACK
DESCRIPTOR.message_types_by_name['proposal'] = _PROPOSAL
DESCRIPTOR.message_types_by_name['request_acceptance'] = _REQUEST_ACCEPTANCE
DESCRIPTOR.message_types_by_name['acquiescence'] = _ACQUIESCENCE
DESCRIPTOR.message_types_by_name['consensus'] = _CONSENSUS
DESCRIPTOR.message_types_by_name['empty'] = _EMPTY

ack = _reflection.GeneratedProtocolMessageType('ack', (_message.Message,), dict(
  DESCRIPTOR = _ACK,
  __module__ = 'paxos_pb2'
  # @@protoc_insertion_point(class_scope:dist_sgd.ack)
  ))
_sym_db.RegisterMessage(ack)

proposal = _reflection.GeneratedProtocolMessageType('proposal', (_message.Message,), dict(
  DESCRIPTOR = _PROPOSAL,
  __module__ = 'paxos_pb2'
  # @@protoc_insertion_point(class_scope:dist_sgd.proposal)
  ))
_sym_db.RegisterMessage(proposal)

request_acceptance = _reflection.GeneratedProtocolMessageType('request_acceptance', (_message.Message,), dict(
  DESCRIPTOR = _REQUEST_ACCEPTANCE,
  __module__ = 'paxos_pb2'
  # @@protoc_insertion_point(class_scope:dist_sgd.request_acceptance)
  ))
_sym_db.RegisterMessage(request_acceptance)

acquiescence = _reflection.GeneratedProtocolMessageType('acquiescence', (_message.Message,), dict(
  DESCRIPTOR = _ACQUIESCENCE,
  __module__ = 'paxos_pb2'
  # @@protoc_insertion_point(class_scope:dist_sgd.acquiescence)
  ))
_sym_db.RegisterMessage(acquiescence)

consensus = _reflection.GeneratedProtocolMessageType('consensus', (_message.Message,), dict(
  DESCRIPTOR = _CONSENSUS,
  __module__ = 'paxos_pb2'
  # @@protoc_insertion_point(class_scope:dist_sgd.consensus)
  ))
_sym_db.RegisterMessage(consensus)

empty = _reflection.GeneratedProtocolMessageType('empty', (_message.Message,), dict(
  DESCRIPTOR = _EMPTY,
  __module__ = 'paxos_pb2'
  # @@protoc_insertion_point(class_scope:dist_sgd.empty)
  ))
_sym_db.RegisterMessage(empty)


DESCRIPTOR.has_options = True
DESCRIPTOR._options = _descriptor._ParseOptions(descriptor_pb2.FileOptions(), _b('\n\013io.dist_sgdB\007DistSGDP\001'))
import abc
import six
from grpc.beta import implementations as beta_implementations
from grpc.framework.common import cardinality
from grpc.framework.interfaces.face import utilities as face_utilities

class BetaPaxosServerServicer(six.with_metaclass(abc.ABCMeta, object)):
  """<fill me in later!>"""
  @abc.abstractmethod
  def prepare(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def accept(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def accepted(self, request, context):
    raise NotImplementedError()
  @abc.abstractmethod
  def ping(self, request, context):
    raise NotImplementedError()

class BetaPaxosServerStub(six.with_metaclass(abc.ABCMeta, object)):
  """The interface to which stubs will conform."""
  @abc.abstractmethod
  def prepare(self, request, timeout):
    raise NotImplementedError()
  prepare.future = None
  @abc.abstractmethod
  def accept(self, request, timeout):
    raise NotImplementedError()
  accept.future = None
  @abc.abstractmethod
  def accepted(self, request, timeout):
    raise NotImplementedError()
  accepted.future = None
  @abc.abstractmethod
  def ping(self, request, timeout):
    raise NotImplementedError()
  ping.future = None

def beta_create_PaxosServer_server(servicer, pool=None, pool_size=None, default_timeout=None, maximum_timeout=None):
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  request_deserializers = {
    ('dist_sgd.PaxosServer', 'accept'): paxos_pb2.request_acceptance.FromString,
    ('dist_sgd.PaxosServer', 'accepted'): paxos_pb2.consensus.FromString,
    ('dist_sgd.PaxosServer', 'ping'): paxos_pb2.empty.FromString,
    ('dist_sgd.PaxosServer', 'prepare'): paxos_pb2.proposal.FromString,
  }
  response_serializers = {
    ('dist_sgd.PaxosServer', 'accept'): paxos_pb2.acquiescence.SerializeToString,
    ('dist_sgd.PaxosServer', 'accepted'): paxos_pb2.empty.SerializeToString,
    ('dist_sgd.PaxosServer', 'ping'): paxos_pb2.empty.SerializeToString,
    ('dist_sgd.PaxosServer', 'prepare'): paxos_pb2.ack.SerializeToString,
  }
  method_implementations = {
    ('dist_sgd.PaxosServer', 'accept'): face_utilities.unary_unary_inline(servicer.accept),
    ('dist_sgd.PaxosServer', 'accepted'): face_utilities.unary_unary_inline(servicer.accepted),
    ('dist_sgd.PaxosServer', 'ping'): face_utilities.unary_unary_inline(servicer.ping),
    ('dist_sgd.PaxosServer', 'prepare'): face_utilities.unary_unary_inline(servicer.prepare),
  }
  server_options = beta_implementations.server_options(request_deserializers=request_deserializers, response_serializers=response_serializers, thread_pool=pool, thread_pool_size=pool_size, default_timeout=default_timeout, maximum_timeout=maximum_timeout)
  return beta_implementations.server(method_implementations, options=server_options)

def beta_create_PaxosServer_stub(channel, host=None, metadata_transformer=None, pool=None, pool_size=None):
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  import paxos_pb2
  request_serializers = {
    ('dist_sgd.PaxosServer', 'accept'): paxos_pb2.request_acceptance.SerializeToString,
    ('dist_sgd.PaxosServer', 'accepted'): paxos_pb2.consensus.SerializeToString,
    ('dist_sgd.PaxosServer', 'ping'): paxos_pb2.empty.SerializeToString,
    ('dist_sgd.PaxosServer', 'prepare'): paxos_pb2.proposal.SerializeToString,
  }
  response_deserializers = {
    ('dist_sgd.PaxosServer', 'accept'): paxos_pb2.acquiescence.FromString,
    ('dist_sgd.PaxosServer', 'accepted'): paxos_pb2.empty.FromString,
    ('dist_sgd.PaxosServer', 'ping'): paxos_pb2.empty.FromString,
    ('dist_sgd.PaxosServer', 'prepare'): paxos_pb2.ack.FromString,
  }
  cardinalities = {
    'accept': cardinality.Cardinality.UNARY_UNARY,
    'accepted': cardinality.Cardinality.UNARY_UNARY,
    'ping': cardinality.Cardinality.UNARY_UNARY,
    'prepare': cardinality.Cardinality.UNARY_UNARY,
  }
  stub_options = beta_implementations.stub_options(host=host, metadata_transformer=metadata_transformer, request_serializers=request_serializers, response_deserializers=response_deserializers, thread_pool=pool, thread_pool_size=pool_size)
  return beta_implementations.dynamic_stub(channel, 'dist_sgd.PaxosServer', cardinalities, options=stub_options)
# @@protoc_insertion_point(module_scope)
